name: Containers

on:
  workflow_dispatch:
    inputs:
      container:
        description: 'Container to build (or "all" for all containers)'
        required: true
        default: "all"
        type: string
  push:
    branches: [main]
    paths:
      - "containers/**"
      - ".github/workflows/containers.yaml"
  pull_request:
    branches: [main]
    paths:
      - "containers/**"
      - ".github/workflows/containers.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: write

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.changes.outputs.containers }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for changes
        id: changes
        run: |
          # Discover all container directories
          ALL_CONTAINERS=($(find containers -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sort))

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.container }}" == "all" ]]; then
              # Build all discovered containers
              # Build JSON array manually to avoid formatting issues
              CONTAINERS_JSON="["
              for i in "${!ALL_CONTAINERS[@]}"; do
                if [[ $i -gt 0 ]]; then
                  CONTAINERS_JSON+=","
                fi
                CONTAINERS_JSON+="\"${ALL_CONTAINERS[$i]}\""
              done
              CONTAINERS_JSON+="]"
              echo "containers=$CONTAINERS_JSON" >> $GITHUB_OUTPUT
            else
              # Validate the specified container exists
              if [[ " ${ALL_CONTAINERS[*]} " =~ " ${{ inputs.container }} " ]]; then
                echo 'containers=["${{ inputs.container }}"]' >> $GITHUB_OUTPUT
              else
                echo "Error: Container '${{ inputs.container }}' not found in containers/ directory"
                echo "Available containers: ${ALL_CONTAINERS[*]}"
                exit 1
              fi
            fi
          else
            # Auto-detect changed containers
            BASE=${{ github.event_name == 'pull_request' && format('origin/{0}', github.base_ref) || 'HEAD~1' }}
            CHANGED_FILES=$(git diff --name-only $BASE...HEAD)
            CONTAINERS=()
            
            for container in "${ALL_CONTAINERS[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "^containers/$container/"; then
                CONTAINERS+=("$container")
              fi
            done
            
            if [[ ${#CONTAINERS[@]} -eq 0 ]]; then
              echo 'containers=[]' >> $GITHUB_OUTPUT
            else
              # Build JSON array manually to avoid formatting issues
              CONTAINERS_JSON="["
              for i in "${!CONTAINERS[@]}"; do
                if [[ $i -gt 0 ]]; then
                  CONTAINERS_JSON+=","
                fi
                CONTAINERS_JSON+="\"${CONTAINERS[$i]}\""
              done
              CONTAINERS_JSON+="]"
              echo "containers=$CONTAINERS_JSON" >> $GITHUB_OUTPUT
            fi
          fi

  build:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.containers != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.changes.outputs.containers) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Install container-structure-test
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 && \
          chmod +x container-structure-test-linux-amd64 && \
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Determine if push should happen
        id: should-push
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "push=false" >> $GITHUB_OUTPUT
          else
            echo "push=true" >> $GITHUB_OUTPUT
          fi

      - name: Build container using unified script
        env:
          PUSH: ${{ steps.should-push.outputs.push }}
          REGISTRY: ghcr.io/${{ github.actor }}
        run: |
          # Use the unified build script for consistency
          if [[ "$PUSH" == "true" ]]; then
            # For production builds, use image-all target with CI options
            ./tools/containers/build.sh ${{ matrix.container }} image-all \
              "--set *.cache-from=type=gha --set *.cache-to=type=gha,mode=max --set *.platform=linux/amd64,linux/arm64"
          else
            # For PR/test builds, use default local build
            ./tools/containers/build.sh ${{ matrix.container }}
          fi

      - name: Run container structure tests
        run: |
          # Get the image name/tag from the build script
          if [[ -f "containers/${{ matrix.container }}/container-structure-test.yaml" ]]; then
            # For PR builds, use local image names; for push builds, use registry names
            if [[ "${{ steps.should-push.outputs.push }}" == "true" ]]; then
              # Production builds push to registry
              IMAGE_NAME="ghcr.io/${{ github.actor }}/${{ matrix.container }}:latest"
            else
              # PR builds use local tags
              IMAGE_NAME="${{ matrix.container }}:latest"
            fi
            
            # Run structure tests
            container-structure-test test \
              --image "${IMAGE_NAME}" \
              --config containers/${{ matrix.container }}/container-structure-test.yaml
          else
            echo "No structure test config found for ${{ matrix.container }}, skipping tests"
          fi

  results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Build results
    needs: [build]
    steps:
      - run: |
          result="${{ needs.build.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi
