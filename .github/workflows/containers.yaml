name: Containers

on:
  workflow_dispatch:
    inputs:
      container:
        description: 'Container to build (or "all" for all containers)'
        required: true
        default: "all"
        type: string
      release:
        description: "Create release artifacts"
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
    paths:
      - "containers/**"
      - ".github/workflows/containers.yaml"
  pull_request:
    branches: [main]
    paths:
      - "containers/**"
      - ".github/workflows/containers.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: read
  attestations: write
  contents: read
  id-token: write
  packages: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.changes.outputs.containers }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: changes
        run: |
          # Discover all container directories
          ALL_CONTAINERS=($(find containers -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sort))

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.container }}" == "all" ]]; then
              # Build all discovered containers
              # Build JSON array manually to avoid formatting issues
              CONTAINERS_JSON="["
              for i in "${!ALL_CONTAINERS[@]}"; do
                if [[ $i -gt 0 ]]; then
                  CONTAINERS_JSON+=","
                fi
                CONTAINERS_JSON+="\"${ALL_CONTAINERS[$i]}\""
              done
              CONTAINERS_JSON+="]"
              echo "containers=$CONTAINERS_JSON" >> $GITHUB_OUTPUT
            else
              # Validate the specified container exists
              if [[ " ${ALL_CONTAINERS[*]} " =~ " ${{ inputs.container }} " ]]; then
                echo 'containers=["${{ inputs.container }}"]' >> $GITHUB_OUTPUT
              else
                echo "Error: Container '${{ inputs.container }}' not found in containers/ directory"
                echo "Available containers: ${ALL_CONTAINERS[*]}"
                exit 1
              fi
            fi
          else
            # Auto-detect changed containers
            BASE=${{ github.event_name == 'pull_request' && format('origin/{0}', github.base_ref) || 'HEAD~1' }}
            CHANGED_FILES=$(git diff --name-only $BASE...HEAD)
            CONTAINERS=()
            
            for container in "${ALL_CONTAINERS[@]}"; do
              if echo "$CHANGED_FILES" | grep -q "^containers/$container/"; then
                CONTAINERS+=("$container")
              fi
            done
            
            if [[ ${#CONTAINERS[@]} -eq 0 ]]; then
              echo 'containers=[]' >> $GITHUB_OUTPUT
            else
              # Build JSON array manually to avoid formatting issues
              CONTAINERS_JSON="["
              for i in "${!CONTAINERS[@]}"; do
                if [[ $i -gt 0 ]]; then
                  CONTAINERS_JSON+=","
                fi
                CONTAINERS_JSON+="\"${CONTAINERS[$i]}\""
              done
              CONTAINERS_JSON+="]"
              echo "containers=$CONTAINERS_JSON" >> $GITHUB_OUTPUT
            fi
          fi

  changed:
    runs-on: ubuntu-latest
    needs: [prepare]
    if: ${{ needs.prepare.outputs.containers != '[]' }}
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      is_release: ${{ steps.release.outputs.is_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Determine if release
        id: release
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.release }}" == "true" ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate build matrix
        id: matrix
        run: |
          CONTAINERS=($(echo '${{ needs.prepare.outputs.containers }}' | jq -r '.[]'))
          MATRIX_JSON="[]"

          for container in "${CONTAINERS[@]}"; do
            if [[ -f "containers/$container/docker-bake.hcl" ]]; then
              cd "containers/$container"
              
              # Extract platforms
              PLATFORMS=$(docker buildx bake image-all --print --progress=quiet | jq -r '.target."image-all".platforms[]?' 2>/dev/null || echo "")
              
              # Extract source and version
              SOURCE=$(docker buildx bake --list type=variables,format=json --progress=quiet | jq -r '.[] | select(.name == "SOURCE") | .value' 2>/dev/null || echo "")
              VERSION=$(docker buildx bake --list type=variables,format=json --progress=quiet | jq -r '.[] | select(.name == "VERSION") | .value' 2>/dev/null || echo "")
              
              cd - > /dev/null
              
              if [[ -z "$PLATFORMS" ]]; then
                echo "Error: No platforms found for $container"
                exit 1
              fi
              
              if [[ -z "$SOURCE" ]]; then
                echo "Error: SOURCE not found for $container"
                exit 1
              fi
              
              if [[ -z "$VERSION" ]]; then
                echo "Error: VERSION not found for $container"
                exit 1
              fi
              
              # Add each platform as a matrix entry
              for platform in $PLATFORMS; do
                MATRIX_ENTRY=$(jq -n --arg container "$container" --arg platform "$platform" --arg source "$SOURCE" --arg version "$VERSION" \
                  '{container: $container, platform: $platform, source: $source, version: $version}')
                MATRIX_JSON=$(echo "$MATRIX_JSON" | jq ". + [$MATRIX_ENTRY]")
              done
            else
              echo "Error: docker-bake.hcl not found for $container"
              exit 1
            fi
          done

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [changed]
    if: ${{ needs.changed.outputs.matrix != '[]' }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.changed.outputs.matrix) }}
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Install container-structure-test
        if: ${{ needs.changed.outputs.is_release == 'false' }}
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 && \
          chmod +x container-structure-test-linux-amd64 && \
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Generate bake metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.actor }}/${{ matrix.container }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          bake-target: image

      - name: Build container
        id: build
        uses: docker/bake-action@v4
        with:
          workdir: containers/${{ matrix.container }}
          targets: image
          files: |
            ${{ steps.meta.outputs.bake-file }}
          set: |
            *.cache-from=type=registry,ref=ghcr.io/${{ github.actor }}/build_cache:${{ matrix.container }}-${{ matrix.platform }}
            *.cache-to=type=registry,ref=ghcr.io/${{ github.actor }}/build_cache:${{ matrix.container }}-${{ matrix.platform }},mode=max,compression=zstd,compression-force=true
            *.platform=${{ matrix.platform }}
            *.labels.org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}
            *.labels.org.opencontainers.image.vendor=${{ github.repository_owner }}
            *.labels.org.opencontainers.image.title=${{ matrix.container }}
            *.labels.org.opencontainers.image.version=${{ matrix.version }}
            *.labels.org.opencontainers.image.source=${{ matrix.source }}
            ${{ needs.changed.outputs.is_release == 'true' && format('*.output=type=image,name=ghcr.io/{0}/{1},push-by-digest=true,name-canonical=true,push=true', github.actor, matrix.container) || '*.output=type=docker' }}

      - name: Export digest
        if: ${{ needs.changed.outputs.is_release == 'true' }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: ${{ needs.changed.outputs.is_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.container }}-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Run container structure tests
        if: ${{ needs.changed.outputs.is_release == 'false' }}
        run: |
          if [[ -f "containers/${{ matrix.container }}/test.yaml" ]]; then
            container-structure-test test \
              --image "${{ steps.build.outputs.imageid }}" \
              --config containers/${{ matrix.container }}/test.yaml
          else
            echo "No structure test config found for ${{ matrix.container }}, skipping tests"
          fi

  release:
    runs-on: ubuntu-latest
    needs: [changed, build]
    if: ${{ needs.changed.outputs.is_release == 'true' }}
    strategy:
      matrix:
        container: ${{ fromJson(needs.changed.outputs.containers) }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-${{ matrix.container }}-*
          path: /tmp/digests
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.actor }}/${{ matrix.container }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.actor }}/${{ matrix.container }}:latest

  attest:
    runs-on: ubuntu-latest
    needs: [changed, release]
    if: ${{ needs.changed.outputs.is_release == 'true' }}
    strategy:
      matrix:
        container: ${{ fromJson(needs.changed.outputs.containers) }}
    permissions:
      attestations: write
      id-token: write
    steps:
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.actor }}/${{ matrix.container }}
          subject-digest: ${{ needs.build.outputs.image-digest }}

  status:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Build status
    needs: [build, release, attest]
    steps:
      - run: |
          result="${{ needs.build.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi

