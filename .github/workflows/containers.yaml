name: Containers

on:
  workflow_dispatch:
    inputs:
      container:
        description: 'Container to build (or "all" for all containers)'
        required: true
        default: "all"
        type: string
      release:
        description: "Create release artifacts"
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
    paths:
      - "containers/**"
      - ".github/workflows/containers.yaml"
  pull_request:
    branches: [main]
    paths:
      - "containers/**"
      - ".github/workflows/containers.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: read
  attestations: write
  contents: read
  id-token: write
  packages: write

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.changed-files.outputs.changed_files }}
    steps:
      - name: Get Changed Files
        id: changed-files
        uses: bjw-s-labs/action-changed-files@930cef8463348e168cab7235c47fe95a7a235f65 # v0.3.3
        with:
          path: containers
          include_only_directories: true
          max_depth: 1

  changed:
    if: ${{ needs.prepare.outputs.changed-files != '[]' || github.event_name == 'workflow_dispatch' }}
    name: Get Changed Containers
    needs: ["prepare"]
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.containers.outputs.containers }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Containers
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: containers
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Discover all container directories
            const containerDir = 'containers';
            const allContainers = fs.readdirSync(containerDir, { withFileTypes: true })
              .filter(dirent => dirent.isDirectory())
              .map(dirent => dirent.name)
              .sort();

            let containersToBuild = [];

            if (context.eventName === 'workflow_dispatch') {
              const containerInput = '${{ inputs.container }}';
              if (containerInput === 'all') {
                containersToBuild = allContainers;
              } else if (allContainers.includes(containerInput)) {
                containersToBuild = [containerInput];
              } else {
                core.setFailed(`Container '${containerInput}' not found. Available: ${allContainers.join(', ')}`);
                return;
              }
            } else {
              const changedFiles = '${{ needs.prepare.outputs.changed-files }}';
              if (changedFiles && changedFiles !== '[]') {
                const changedContainers = JSON.parse(changedFiles);
                containersToBuild = changedContainers.filter(container => allContainers.includes(container));
              }
            }

            core.setOutput('containers', JSON.stringify(containersToBuild));
            console.log('containers:', JSON.stringify(containersToBuild, null, 2));
            core.summary.addHeading('Containers to build:').addList(containersToBuild).write();

  plan:
    runs-on: ubuntu-latest
    needs: [changed]
    if: ${{ needs.changed.outputs.containers != '[]' }}
    strategy:
      matrix:
        container: ${{ fromJson(needs.changed.outputs.containers) }}
    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}
      source: ${{ steps.options.outputs.source }}
      version: ${{ steps.options.outputs.version }}
      is_release: ${{ steps.release.outputs.is_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Determine if release
        id: release
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.release }}" == "true" ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Get container options
        id: options
        working-directory: containers/${{ matrix.container }}
        run: |
          SOURCE=$(docker buildx bake --list type=variables,format=json --progress=quiet | jq -r '.[] | select(.name == "SOURCE") | .value' 2>/dev/null || echo "")
          VERSION=$(docker buildx bake --list type=variables,format=json --progress=quiet | jq -r '.[] | select(.name == "VERSION") | .value' 2>/dev/null || echo "")

          if [[ -z "$SOURCE" ]]; then
            echo "Error: SOURCE not found for ${{ matrix.container }}"
            exit 1
          fi

          if [[ -z "$VERSION" ]]; then
            echo "Error: VERSION not found for ${{ matrix.container }}"
            exit 1
          fi

          echo "source=$SOURCE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get platforms
        id: platforms
        working-directory: containers/${{ matrix.container }}
        run: |
          PLATFORMS=$(docker buildx bake image-all --print --progress=quiet | jq -c '.target."image-all".platforms // []')
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [changed, plan]
    if: ${{ needs.plan.outputs.platforms != '[]' }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.changed.outputs.containers) }}
        platform: ${{ fromJson(needs.plan.outputs.platforms) }}
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Download bake metadata
        uses: actions/download-artifact@v4
        with:
          name: bake-${{ matrix.container }}
          path: ${{ runner.temp }}

      - name: Install container-structure-test
        if: ${{ needs.plan.outputs.is_release == 'false' }}
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 && \
          chmod +x container-structure-test-linux-amd64 && \
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build container metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          flavor: latest=false
          images: ghcr.io/${{ github.actor }}/${{ matrix.container }}
          labels: |
            org.opencontainers.image.title=${{ matrix.container }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.options.outputs.version }}
            type=raw,value=${{ steps.options.outputs.version }}
            type=raw,value=rolling
          bake-target: image

      - name: Upload bake metadata
        uses: actions/upload-artifact@v4
        with:
          name: bake-${{ matrix.container }}
          path: ${{ runner.temp }}/docker-metadata-action-bake.json
          if-no-files-found: error
          retention-days: 1

      - name: Build container
        id: build
        uses: docker/bake-action@v4
        with:
          workdir: containers/${{ matrix.container }}
          targets: image
          files: |
            ${{ runner.temp }}/docker-metadata-action-bake.json
          set: |
            *.cache-from=type=registry,ref=ghcr.io/${{ github.actor }}/build_cache:${{ matrix.container }}-${{ matrix.platform }}
            *.cache-to=type=registry,ref=ghcr.io/${{ github.actor }}/build_cache:${{ matrix.container }}-${{ matrix.platform }},mode=max,compression=zstd,compression-force=true
            *.platform=${{ matrix.platform }}
            *.labels.org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}
            *.labels.org.opencontainers.image.vendor=${{ github.repository_owner }}
            *.labels.org.opencontainers.image.version=${{ needs.plan.outputs.version }}
            *.labels.org.opencontainers.image.source=${{ needs.plan.outputs.source }}
            ${{ needs.plan.outputs.is_release == 'true' && format('*.output=type=image,name=ghcr.io/{0}/{1},push-by-digest=true,name-canonical=true,push=true', github.actor, matrix.container) || '*.output=type=docker' }}

      - name: Export digest
        if: ${{ needs.plan.outputs.is_release == 'true' }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: ${{ needs.plan.outputs.is_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.container }}-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Run container structure tests
        if: ${{ needs.plan.outputs.is_release == 'false' }}
        run: |
          if [[ -f "containers/${{ matrix.container }}/test.yaml" ]]; then
            container-structure-test test \
              --image "${{ steps.build.outputs.imageid }}" \
              --config containers/${{ matrix.container }}/test.yaml
          else
            echo "No structure test config found for ${{ matrix.container }}, skipping tests"
          fi

  release:
    runs-on: ubuntu-latest
    needs: [changed, plan, build]
    if: ${{ needs.plan.outputs.is_release == 'true' }}
    strategy:
      matrix:
        container: ${{ fromJson(needs.changed.outputs.containers) }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-${{ matrix.container }}-*
          path: /tmp/digests
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.actor }}/${{ matrix.container }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.actor }}/${{ matrix.container }}:latest

  attest:
    runs-on: ubuntu-latest
    needs: [changed, plan, release]
    if: ${{ needs.plan.outputs.is_release == 'true' }}
    strategy:
      matrix:
        container: ${{ fromJson(needs.changed.outputs.containers) }}
    permissions:
      attestations: write
      id-token: write
    steps:
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.actor }}/${{ matrix.container }}
          subject-digest: ${{ needs.build.outputs.image-digest }}

  status:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Build status
    needs: [build, release, attest]
    steps:
      - run: |
          result="${{ needs.build.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi
