name: Bazel
on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  packages: write
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - name: "Linux CPU"
            config: "linux"
            targets: "//..."
          - name: "Linux CUDA"
            config: "linux-cuda"
            targets: "//torches:..."
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.8.5
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Test ${{ matrix.platform.name }}
        run: bazel test ${{ matrix.platform.targets }} --config=${{ matrix.platform.config }}
      - name: Build ${{ matrix.platform.name }}
        run: bazel build ${{ matrix.platform.targets }} --config=${{ matrix.platform.config }}
      - name: Check formatting (Rust)
        if: matrix.platform.config == 'linux'
        run: bazel run @rules_rust//:rustfmt_test
      - name: Run clippy (Rust)
        if: matrix.platform.config == 'linux'
        run: bazel run @rules_rust//:clippy_test
  build-images:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: "${{ github.actor }}"
          password: "${{ github.token }}"
      - name: Generate version
        id: version
        run: |
          chmod +x ./tools/get-version.sh
          VERSION=$(./tools/get-version.sh gt7/telemetry-server)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Generate docker image tags
        id: metadata
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          labels: |-
            org.opencontainers.image.title=gt7-telemetry-server
            org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/gt7-telemetry-server
            org.opencontainers.image.description=GT7 telemetry server with WebSocket and Pulsar support
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
          images: |
            name=ghcr.io/${{ github.actor }}/gt7-telemetry-server
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=ref,event=branch
            type=ref,event=pr,prefix=pr,suffix=,pattern={{.number}}
            type=sha
      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.8.5
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Build container images
        run: |
          bazel run //gt7/telemetry-server:telemetry_tarball
      - name: Load and push image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          docker load -i dist/bin/gt7/telemetry-server/telemetry_tarball/tarball.tar
          for tag in $(echo '${{ steps.metadata.outputs.tags }}' | tr '\n' ' '); do
            docker tag gt7-telemetry-server:latest $tag
            docker push $tag
          done
  results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Build results
    needs: [test, build-images]
    steps:
      - run: |
          test_result="${{ needs.test.result }}"
          build_result="${{ needs.build-images.result }}"
          if [[ $test_result == "success" && ($build_result == "success" || $build_result == "skipped") ]]; then
            exit 0
          else
            exit 1
          fi
