name: Bazel
on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  packages: write
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Build all targets
        run: bazel build //... --config=ci
      - name: Test all targets
        run: bazel test //... --config=ci
  build-images:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: "${{ github.actor }}"
          password: "${{ github.token }}"
      - name: Generate version
        id: version
        run: |
          VERSION=$(bazel run //tools:get-version -- gt7/telemetry)
          MONOREPO_VERSION=$(bazel run //tools:get-version -- .)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "monorepo_version=$MONOREPO_VERSION" >> $GITHUB_OUTPUT
      - name: Generate docker image tags
        id: metadata
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
          labels: |-
            org.opencontainers.image.title=gt7-telemetry-server
            org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/gt7-telemetry-server
            org.opencontainers.image.description=GT7 telemetry server with WebSocket and Kafka support
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
          images: |
            name=ghcr.io/${{ github.actor }}/gt7-telemetry-server
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=${{ steps.version.outputs.monorepo_version }}
            type=ref,event=branch
            type=ref,event=pr,prefix=pr,suffix=,pattern={{.number}}
            type=sha
      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true
      - name: Build container images
        run: |
          # Find all oci_load targets (tarball builders) and build them
          targets=$(bazel query 'kind("oci_load", //...)')
          if [ -n "$targets" ]; then
            echo "Building container images: $targets"
            for target in $targets; do
              bazel run $target --config=ci
            done
          else
            echo "No container image targets found"
          fi
      - name: Load and push images
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: |
          # Find all generated tarballs and load them
          find bazel-bin -name "tarball.tar" -type f | while read tarball; do
            echo "Loading $tarball"
            docker load -i "$tarball"
          done

          # For now, only push the GT7 telemetry server
          # TODO: Make this more generic when we have multiple services
          if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "gt7-telemetry-server:latest"; then
            for tag in $(echo '${{ steps.metadata.outputs.tags }}' | tr '\n' ' '); do
              docker tag gt7-telemetry-server:latest $tag
              docker push $tag
            done
          fi
  results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Build results
    needs: [test, build-images]
    steps:
      - run: |
          test_result="${{ needs.test.result }}"
          build_result="${{ needs.build-images.result }}"
          if [[ $test_result == "success" && ($build_result == "success" || $build_result == "skipped") ]]; then
            exit 0
          else
            exit 1
          fi
