load("@npm//:defs.bzl", "npm_link_all_packages")
load("@rules_multirun//:defs.bzl", "multirun")
load("@rules_uv//uv:pip.bzl", "pip_compile")
load("@rules_uv//uv:venv.bzl", "create_venv", "sync_venv")


package(default_visibility = ["//visibility:public"])

# gazelle:map_kind py_library py_library @aspect_rules_py//py:defs.bzl
# gazelle:map_kind py_binary py_binary @aspect_rules_py//py:defs.bzl
# gazelle:map_kind py_test py_test @aspect_rules_py//py:defs.bzl

npm_link_all_packages(name = "node_modules")

pip_compile(
    name = "requirements_linux",
    python_platform = "x86_64-unknown-linux-gnu",
    requirements_in = "requirements_linux.txt",
    requirements_txt = "requirements_linux_lock.txt",
)

pip_compile(
    name = "requirements_macos",
    python_platform = "aarch64-apple-darwin",
    requirements_in = "requirements_darwin.txt",
    requirements_txt = "requirements_darwin_lock.txt",
)

multirun(
    name = "requirements",
    commands = [
        ":requirements_linux",
        ":requirements_macos",
    ],
    # Running in a single threaded mode allows consecutive `uv` invocations to benefit
    # from the `uv` cache from the first run.
    jobs = 1,
)

create_venv(
    name = "venv",
    destination_folder = ".venv",
    requirements_txt = select({
        "@platforms//os:linux": ":requirements_linux_lock.txt",
        "@platforms//os:osx": ":requirements_darwin_lock.txt",
    }),
)

